#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class RpcContext:
  """
  Attributes:
   - traceID
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'traceID', None, None, ), # 1
  )

  def __init__(self, traceID=None,):
    self.traceID = traceID

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.traceID = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RpcContext')
    if self.traceID != None:
      oprot.writeFieldBegin('traceID', TType.STRING, 1)
      oprot.writeString(self.traceID)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ArticleThrift:
  """
  Attributes:
   - title
   - content
   - author
   - docid
   - url
   - ctime
   - image_count
   - ztlevel
   - filter
   - type
   - json_str
   - thumbs
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'title', None, None, ), # 1
    (2, TType.STRING, 'content', None, None, ), # 2
    (3, TType.STRING, 'author', None, None, ), # 3
    (4, TType.STRING, 'docid', None, None, ), # 4
    (5, TType.STRING, 'url', None, None, ), # 5
    (6, TType.I64, 'ctime', None, None, ), # 6
    (7, TType.I32, 'image_count', None, None, ), # 7
    (8, TType.I32, 'ztlevel', None, None, ), # 8
    (9, TType.I64, 'filter', None, None, ), # 9
    (10, TType.I32, 'type', None, None, ), # 10
    (11, TType.STRING, 'json_str', None, None, ), # 11
    (12, TType.LIST, 'thumbs', (TType.STRING,None), None, ), # 12
  )

  def __init__(self, title=None, content=None, author=None, docid=None, url=None, ctime=None, image_count=None, ztlevel=None, filter=None, type=None, json_str=None, thumbs=None,):
    self.title = title
    self.content = content
    self.author = author
    self.docid = docid
    self.url = url
    self.ctime = ctime
    self.image_count = image_count
    self.ztlevel = ztlevel
    self.filter = filter
    self.type = type
    self.json_str = json_str
    self.thumbs = thumbs

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.content = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.author = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.docid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.ctime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.image_count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.ztlevel = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.filter = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.json_str = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.LIST:
          self.thumbs = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString();
            self.thumbs.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ArticleThrift')
    if self.title != None:
      oprot.writeFieldBegin('title', TType.STRING, 1)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.content != None:
      oprot.writeFieldBegin('content', TType.STRING, 2)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    if self.author != None:
      oprot.writeFieldBegin('author', TType.STRING, 3)
      oprot.writeString(self.author)
      oprot.writeFieldEnd()
    if self.docid != None:
      oprot.writeFieldBegin('docid', TType.STRING, 4)
      oprot.writeString(self.docid)
      oprot.writeFieldEnd()
    if self.url != None:
      oprot.writeFieldBegin('url', TType.STRING, 5)
      oprot.writeString(self.url)
      oprot.writeFieldEnd()
    if self.ctime != None:
      oprot.writeFieldBegin('ctime', TType.I64, 6)
      oprot.writeI64(self.ctime)
      oprot.writeFieldEnd()
    if self.image_count != None:
      oprot.writeFieldBegin('image_count', TType.I32, 7)
      oprot.writeI32(self.image_count)
      oprot.writeFieldEnd()
    if self.ztlevel != None:
      oprot.writeFieldBegin('ztlevel', TType.I32, 8)
      oprot.writeI32(self.ztlevel)
      oprot.writeFieldEnd()
    if self.filter != None:
      oprot.writeFieldBegin('filter', TType.I64, 9)
      oprot.writeI64(self.filter)
      oprot.writeFieldEnd()
    if self.type != None:
      oprot.writeFieldBegin('type', TType.I32, 10)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.json_str != None:
      oprot.writeFieldBegin('json_str', TType.STRING, 11)
      oprot.writeString(self.json_str)
      oprot.writeFieldEnd()
    if self.thumbs != None:
      oprot.writeFieldBegin('thumbs', TType.LIST, 12)
      oprot.writeListBegin(TType.STRING, len(self.thumbs))
      for iter6 in self.thumbs:
        oprot.writeString(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

